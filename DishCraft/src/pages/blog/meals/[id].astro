---
// src/pages/blog/meals/[id].astro

// Import a layout component (adjust path as needed)
import BlogPost from '../../../layouts/BlogPost.astro'; // Assuming layout is 3 levels up

// Get the meal ID from the URL parameter
const { id: mealId } = Astro.params;

// Define the structure for a single meal from the lookup API
// Note: The lookup API returns meals in an array, even if it's just one
interface MealDetail {
  idMeal: string;
  strMeal: string;
  strDrinkAlternate?: string | null;
  strCategory: string;
  strArea: string;
  strInstructions: string;
  strMealThumb: string;
  strTags?: string | null;
  strYoutube?: string | null;
  // Ingredients and Measures (example for a few)
  strIngredient1?: string | null;
  strIngredient2?: string | null;
  strIngredient3?: string | null;
  // ... up to strIngredient20
  strMeasure1?: string | null;
  strMeasure2?: string | null;
  strMeasure3?: string | null;
  // ... up to strMeasure20
  strSource?: string | null;
  strImageSource?: string | null;
  strCreativeCommonsConfirmed?: string | null;
  dateModified?: string | null;
}

let meal: MealDetail | null = null;
let error: string | null = null;
let pageTitle = "Meal Recipe"; // Default title
let description = "Recipe details for a delicious meal."; // Default description

// Make sure prerendering is off if needed (usually default in 'server' mode)
export const prerender = false;

if (!mealId) {
  error = "Meal ID is missing.";
} else {
  try {
    // Fetch the specific meal details using the ID
    const apiUrl = `https://www.themealdb.com/api/json/v1/1/lookup.php?i=${mealId}`;
    console.log(`[${new Date().toISOString()}] Fetching meal detail from: ${apiUrl}`);
    const response = await fetch(apiUrl);

    if (!response.ok) {
      throw new Error(`Network response was not ok: ${response.statusText}`);
    }

    const data = await response.json();

    // The API returns { meals: [mealDetail] } or { meals: null }
    if (data.meals && data.meals.length > 0) {
      meal = data.meals[0];
      pageTitle = meal.strMeal; // Set title to meal name
      description = `Recipe for ${meal.strMeal}: ${meal.strInstructions.substring(0, 160)}...`; // Set description
    } else {
      error = `Meal with ID ${mealId} not found.`;
    }
     console.log(`[${new Date().toISOString()}] Meal fetch successful for ID: ${mealId}`);
  } catch (fetchError) {
    console.error(`[${new Date().toISOString()}] Failed to fetch meal details for ID ${mealId}:`, fetchError);
    error = "Sorry, there was an error fetching the recipe details. Please try again later.";
  }
}

// Helper function to create an ingredients list
function getIngredients(mealData: MealDetail): { ingredient: string; measure: string }[] {
  const ingredients = [];
  for (let i = 1; i <= 20; i++) {
    const ingredient = mealData[`strIngredient${i}` as keyof MealDetail] as string | null;
    const measure = mealData[`strMeasure${i}` as keyof MealDetail] as string | null;
    // Check if ingredient is present and not empty/whitespace
    if (ingredient && ingredient.trim()) {
      ingredients.push({ ingredient: ingredient.trim(), measure: (measure || '').trim() });
    } else {
      // Stop if we encounter the first empty ingredient
      break;
    }
  }
  return ingredients;
}

const ingredientsList = meal ? getIngredients(meal) : [];

---

{/* Removed pubDate prop, added hideDateDisplay={true} */}
<BlogPost title={pageTitle} description={description} hideDateDisplay={true}>

  {error && (
    <div class="error-state">
      <p>{error}</p>
      <a href="/blog/meal-list" class="back-link">← Back to Meal List</a>
    </div>
  )}

  {meal && !error && (
    <article class="recipe-details">
      <div class="recipe-image">
        <img
            src={meal.strMealThumb}
            alt={`Image of ${meal.strMeal}`}
            onerror="this.onerror=null; this.src='https://placehold.co/800x600/EEE/333?text=Image+Not+Available';"
        />
      </div>

      <header class="recipe-header">
        <h1>{meal.strMeal}</h1>
        <div class="recipe-meta">
          {meal.strCategory && <span class="category">{meal.strCategory}</span>}
          {meal.strArea && <span class="area">{meal.strArea}</span>}
          {meal.strTags && <span class="tags">Tags: {meal.strTags.split(',').map(tag => tag.trim()).join(', ')}</span>}
        </div>
      </header>

      <section class="recipe-ingredients">
        <h2>Ingredients</h2>
        {ingredientsList.length > 0 ? (
          <ul>
            {ingredientsList.map(item => (
              <li>{item.measure} {item.ingredient}</li>
            ))}
          </ul>
        ) : (
          <p>Ingredient information not available.</p>
        )}
      </section>

      <section class="recipe-instructions">
        <h2>Instructions</h2>
        {/* Replace newlines in instructions with <br> tags for HTML display */}
        <p set:html={meal.strInstructions?.replace(/\r\n/g, '<br>') || 'Instructions not available.'}></p>
      </section>

       {meal.strYoutube && (
        <section class="recipe-video">
          <h2>Video Recipe</h2>
          <div class="video-container">
             {/* Extract YouTube video ID and use embed URL */}
            <iframe
              src={`https://www.youtube.com/embed/${meal.strYoutube.split('v=')[1]}`}
              frameborder="0"
              allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
              allowfullscreen
              title={`YouTube video recipe for ${meal.strMeal}`}>
            </iframe>
          </div>
        </section>
      )}

       {meal.strSource && (
         <p class="recipe-source">
           Source: <a href={meal.strSource} target="_blank" rel="noopener noreferrer">Link</a>
         </p>
       )}

      <a href="/blog/meal-list" class="back-link">← Back to Meal List</a>

    </article>
  )}

</BlogPost>

<style>
  .recipe-details {
    max-width: 800px; /* Limit width for readability */
    margin: 2rem auto;
    padding: 1.5rem;
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
  }

  .recipe-image {
    width: 100%;
    margin-bottom: 2rem;
  }

  .recipe-image img {
    width: 100%;
    height: auto;
    max-height: 500px; /* Limit image height */
    object-fit: cover;
    border-radius: 8px;
    display: block;
  }

  .recipe-header {
    text-align: center;
    margin-bottom: 2rem;
    border-bottom: 1px solid #eee;
    padding-bottom: 1.5rem;
  }

  .recipe-header h1 {
    font-size: 2.5rem;
    margin-bottom: 0.5rem;
    line-height: 1.2;
  }

  .recipe-meta {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: 0.5rem 1rem; /* Row and column gap */
    color: #555;
    font-size: 0.9rem;
  }

  .recipe-meta span {
    display: inline-block;
    padding: 0.25rem 0.6rem;
    border-radius: 4px;
    background-color: #f0f0f0;
  }
   .recipe-meta .tags {
      background-color: transparent;
      padding: 0;
   }


  .recipe-ingredients,
  .recipe-instructions,
  .recipe-video {
    margin-bottom: 2.5rem;
  }

  .recipe-ingredients h2,
  .recipe-instructions h2,
  .recipe-video h2 {
    font-size: 1.8rem;
    margin-bottom: 1rem;
    color: #333;
    border-bottom: 2px solid #4a6cf7; /* Accent color border */
    padding-bottom: 0.5rem;
    display: inline-block; /* Keep border only under text */
  }

  .recipe-ingredients ul {
    list-style: disc; /* Use disc bullets */
    padding-left: 2rem; /* Indent list */
    margin: 0;
  }

  .recipe-ingredients li {
    margin-bottom: 0.75rem; /* Space between ingredients */
    line-height: 1.6;
    color: #444;
  }

  .recipe-instructions p {
    line-height: 1.8; /* Increase line height for readability */
    color: #333;
    white-space: pre-line; /* Respect newlines from the source */
  }

   .video-container {
      position: relative;
      padding-bottom: 56.25%; /* 16:9 aspect ratio */
      height: 0;
      overflow: hidden;
      max-width: 100%;
      background: #000;
      border-radius: 8px; /* Rounded corners for video container */
   }

   .video-container iframe {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
   }

   .recipe-source {
      font-size: 0.9rem;
      color: #666;
      margin-top: 1rem;
   }

   .recipe-source a {
      color: #4a6cf7;
   }

  .back-link {
    display: inline-block;
    margin-top: 2rem;
    color: #4a6cf7;
    text-decoration: none;
    font-weight: 500;
  }

  .back-link:hover {
    text-decoration: underline;
  }

  .error-state {
    text-align: center;
    padding: 3rem 1rem;
    background: #fff0f0; /* Light red background for errors */
    border: 1px solid #ffcccc; /* Red border */
    color: #c0392b; /* Dark red text */
    border-radius: 8px;
    margin: 2rem 0;
  }
  .error-state p {
     color: #c0392b;
     margin-bottom: 1rem;
  }

  @media (max-width: 768px) {
    .recipe-header h1 {
      font-size: 2rem;
    }
    .recipe-details {
       padding: 1rem;
       margin: 1rem;
    }
  }
</style>
